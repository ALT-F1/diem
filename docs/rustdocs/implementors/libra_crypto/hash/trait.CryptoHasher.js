(function() {var implementors = {};
implementors["consensus_types"] = [{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"consensus_types/block_data/struct.BlockDataHasher.html\" title=\"struct consensus_types::block_data::BlockDataHasher\">BlockDataHasher</a>","synthetic":false,"types":["consensus_types::block_data::BlockDataHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"consensus_types/timeout/struct.TimeoutHasher.html\" title=\"struct consensus_types::timeout::TimeoutHasher\">TimeoutHasher</a>","synthetic":false,"types":["consensus_types::timeout::TimeoutHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"consensus_types/vote_data/struct.VoteDataHasher.html\" title=\"struct consensus_types::vote_data::VoteDataHasher\">VoteDataHasher</a>","synthetic":false,"types":["consensus_types::vote_data::VoteDataHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"consensus_types/vote_proposal/struct.VoteProposalHasher.html\" title=\"struct consensus_types::vote_proposal::VoteProposalHasher\">VoteProposalHasher</a>","synthetic":false,"types":["consensus_types::vote_proposal::VoteProposalHasher"]}];
implementors["libra_crypto"] = [];
implementors["libra_types"] = [{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/account_state_blob/struct.AccountStateBlobHasher.html\" title=\"struct libra_types::account_state_blob::AccountStateBlobHasher\">AccountStateBlobHasher</a>","synthetic":false,"types":["libra_types::account_state_blob::AccountStateBlobHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/contract_event/struct.ContractEventHasher.html\" title=\"struct libra_types::contract_event::ContractEventHasher\">ContractEventHasher</a>","synthetic":false,"types":["libra_types::contract_event::ContractEventHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/contract_event/struct.ContractEventV0Hasher.html\" title=\"struct libra_types::contract_event::ContractEventV0Hasher\">ContractEventV0Hasher</a>","synthetic":false,"types":["libra_types::contract_event::ContractEventV0Hasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/ledger_info/struct.LedgerInfoHasher.html\" title=\"struct libra_types::ledger_info::LedgerInfoHasher\">LedgerInfoHasher</a>","synthetic":false,"types":["libra_types::ledger_info::LedgerInfoHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/proof/struct.SparseMerkleLeafNodeHasher.html\" title=\"struct libra_types::proof::SparseMerkleLeafNodeHasher\">SparseMerkleLeafNodeHasher</a>","synthetic":false,"types":["libra_types::proof::SparseMerkleLeafNodeHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/transaction/authenticator/struct.AuthenticationKeyHasher.html\" title=\"struct libra_types::transaction::authenticator::AuthenticationKeyHasher\">AuthenticationKeyHasher</a>","synthetic":false,"types":["libra_types::transaction::authenticator::AuthenticationKeyHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/transaction/struct.RawTransactionHasher.html\" title=\"struct libra_types::transaction::RawTransactionHasher\">RawTransactionHasher</a>","synthetic":false,"types":["libra_types::transaction::RawTransactionHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/transaction/struct.TransactionInfoHasher.html\" title=\"struct libra_types::transaction::TransactionInfoHasher\">TransactionInfoHasher</a>","synthetic":false,"types":["libra_types::transaction::TransactionInfoHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/transaction/struct.TransactionHasher.html\" title=\"struct libra_types::transaction::TransactionHasher\">TransactionHasher</a>","synthetic":false,"types":["libra_types::transaction::TransactionHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"libra_types/waypoint/struct.Ledger2WaypointConverterHasher.html\" title=\"struct libra_types::waypoint::Ledger2WaypointConverterHasher\">Ledger2WaypointConverterHasher</a>","synthetic":false,"types":["libra_types::waypoint::Ledger2WaypointConverterHasher"]}];
implementors["move_core_types"] = [{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"move_core_types/account_address/struct.AccountAddressHasher.html\" title=\"struct move_core_types::account_address::AccountAddressHasher\">AccountAddressHasher</a>","synthetic":false,"types":["move_core_types::account_address::AccountAddressHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"move_core_types/language_storage/struct.StructTagHasher.html\" title=\"struct move_core_types::language_storage::StructTagHasher\">StructTagHasher</a>","synthetic":false,"types":["move_core_types::language_storage::StructTagHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"move_core_types/language_storage/struct.ModuleIdHasher.html\" title=\"struct move_core_types::language_storage::ModuleIdHasher\">ModuleIdHasher</a>","synthetic":false,"types":["move_core_types::language_storage::ModuleIdHasher"]}];
implementors["network"] = [{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"network/protocols/gossip_discovery/struct.PeerInfoHasher.html\" title=\"struct network::protocols::gossip_discovery::PeerInfoHasher\">PeerInfoHasher</a>","synthetic":false,"types":["network::protocols::gossip_discovery::PeerInfoHasher"]},{"text":"impl <a class=\"trait\" href=\"libra_crypto/hash/trait.CryptoHasher.html\" title=\"trait libra_crypto::hash::CryptoHasher\">CryptoHasher</a> for <a class=\"struct\" href=\"network/protocols/gossip_discovery/struct.FullNodeInfoHasher.html\" title=\"struct network::protocols::gossip_discovery::FullNodeInfoHasher\">FullNodeInfoHasher</a>","synthetic":false,"types":["network::protocols::gossip_discovery::FullNodeInfoHasher"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()