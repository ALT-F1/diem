initSidebarItems({"constant":[["ON_CHAIN_CONFIG_REGISTRY","State sync will panic if the value of any config in this registry is uninitialized"]],"fn":[["access_path_for_config",""],["config_address",""],["new_epoch_event_key",""]],"struct":[["ConfigID","To register an on-chain config in Rust: 1. Implement the `OnChainConfig` trait for the Rust representation of the config 2. Add the config's `ConfigID` to `ON_CHAIN_CONFIG_REGISTRY`"],["ConfigurationResource",""],["LibraVersion","Defines the version of Libra Validator software."],["OnChainConfigPayload",""],["RegisteredCurrencies",""],["VMConfig","Defines all the on chain configuration data needed by VM."],["VMPublishingOption","Defines and holds the publishing policies for the VM. There are three possible configurations: 1. No module publishing, only allowlisted scripts are allowed. 2. No module publishing, custom scripts are allowed. 3. Both module publishing and custom scripts are allowed. We represent these as an enum instead of a struct since allowlisting and module/script publishing are mutually exclusive options."],["ValidatorSet",""]],"trait":[["ConfigStorage","Trait to be implemented by a storage type from which to read on-chain configs"],["OnChainConfig","Trait to be implemented by a Rust struct representation of an on-chain config that is stored in storage as a serialized byte array"]]});