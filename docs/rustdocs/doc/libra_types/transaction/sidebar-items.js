initSidebarItems({"constant":[["MAX_TRANSACTION_SIZE_IN_BYTES",""],["PRE_GENESIS_VERSION",""],["SCRIPT_HASH_LENGTH",""]],"enum":[["GovernanceRole",""],["Transaction","`Transaction` will be the transaction type used internally in the libra node to represent the transaction to be processed and persisted."],["TransactionArgument",""],["TransactionPayload","Different kinds of transactions."],["TransactionStatus","The status of executing a transaction. The VM decides whether or not we should `Keep` the transaction output or `Discard` it based upon the execution of the transaction. We wrap these decisions around a `VMStatus` that provides more detail on the final execution state of the VM."],["WriteSetPayload","Two different kinds of WriteSet transactions."]],"fn":[["parse_transaction_argument",""]],"mod":[["authenticator",""],["helpers",""],["metadata","This file implements Libra transaction metadata types to allow easy parsing and introspection into metadata, whether the transaction is using regular subaddressing, is subject to travel rule or corresponds to an on-chain payment refund."]],"struct":[["ArgumentABI","The description of a (regular) argument in a script."],["ChangeSet",""],["Module",""],["RawTransaction","RawTransaction is the portion of a transaction that a client signs."],["RawTransactionHasher","Cryptographic hasher for an LCS-serializable #item"],["Script","Call a Move script."],["ScriptABI","How to call a particular Move script (aka. an \"ABI\")."],["SignatureCheckedTransaction","A transaction for which the signature has been verified. Created by [`SignedTransaction::check_signature`] and [`RawTransaction::sign`]."],["SignedTransaction","A transaction that has been signed."],["TransactionHasher","Cryptographic hasher for an LCS-serializable #item"],["TransactionInfo","`TransactionInfo` is the object we store in the transaction accumulator. It consists of the transaction as well as the execution result of this transaction."],["TransactionInfoHasher","Cryptographic hasher for an LCS-serializable #item"],["TransactionListWithProof","The list may have three states: 1. The list is empty. Both proofs must be `None`. 2. The list has only 1 transaction/transaction_info. Then `proof_of_first_transaction` must exist and `proof_of_last_transaction` must be `None`. 3. The list has 2+ transactions/transaction_infos. The both proofs must exist."],["TransactionOutput","The output of executing a transaction."],["TransactionToCommit",""],["TransactionWithProof",""],["TypeArgumentABI","The description of a type argument in a script."],["VMValidatorResult","The result of running the transaction through the VM validator."]],"type":[["Version",""]]});