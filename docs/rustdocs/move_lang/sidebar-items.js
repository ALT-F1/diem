initSidebarItems({"constant":[["MOVE_COMPILED_EXTENSION",""],["MOVE_COMPILED_INTERFACES_DIR",""],["MOVE_EXTENSION",""],["SOURCE_MAP_EXTENSION",""]],"enum":[["Pass",""],["PassResult",""]],"fn":[["extension_equals",""],["find_filenames","`paths``paths`"],["find_move_filenames","`paths``MOVE_EXTENSION``keep_specified_files``paths`"],["generate_interface_files",""],["is_permitted_char","Determine if a character is permitted character."],["is_permitted_newline_char","Determine if a character is a permitted newline character."],["is_permitted_printable_char","Determine if a character is an allowed eye-visible (printable) character."],["move_check","Given a set of targets and a set of dependencies - Checks the targets with the dependencies (targets can be dependencies of other targets) Does not run compile to Move bytecode Very large programs might fail on compilation even though they have been checked due to size   limitations of the Move bytecode"],["move_check_and_report","Similar to move_check but it reports it's errors to stderr"],["move_compile","Given a set of targets and a set of dependencies - Checks the targets with the dependencies (targets can be dependencies of other targets) - Compiles the targets to Move bytecode Does not run the Move bytecode verifier on the compiled targets, as the Move front end should   be more restrictive"],["move_compile_and_report","Similar to move_compile but it reports it's errors to stderr"],["move_continue_up_to","Runs the compiler from a previous result until a stopping point. The stopping point is inclusive, meaning the pass specified by `until: Pass` will be run"],["move_parse","Given a set of targets and a set of dependencies, produces a `parser::ast::Program` along side a `CommentMap`. The `sender_opt` is returned for ease of use with `PassResult::Parser`"],["output_compiled_units","Given a file map and a set of compiled programs, saves the compiled programs to disk"],["path_to_string",""],["sanity_check_compiled_units","Runs the bytecode verifier on the compiled units Fails if the bytecode verifier errors"]],"macro":[["unwrap_or_report_errors",""]],"mod":[["cfgir",""],["command_line",""],["compiled_unit",""],["errors",""],["expansion",""],["hlir",""],["interface_generator",""],["ir_translation",""],["naming",""],["parser",""],["shared",""],["test_utils",""],["typing",""]],"type":[["CommentMap","Types to represent comments."],["FileCommentMap",""],["MatchedFileCommentMap",""]]});